Core Java


Java is a plateform independed and object oriented programming language.

plateform independed.

	it means the java class file is developed in one mechine and
run it in any other operating system.

object oriented.

	it means we create a class and use that class methodes we created 
object to that class.
	they are four methodes:
		1) Inheritance
			it is a oops concept, in which the chils class get the
		all the property of its parent class using a keyword called extend.
		2) polymorphism
			its about methods.it means more than one form.in which we can write 
		a same method in more than ones. 
		3) Encapsulation
			In encapsulation, the variables of a class will be hidden from other classes, 
		and can be accessed only through the methods of their current class.
		4) Abstraction
			it means hidding the data from ine class to another

Day-1:

1) Open eclipse.
	Window -> showview -> others -> Navigator.
   Add project
	File -> New ->other -> java project.
		name of the project(with out space)
   go to download copy day-1 and past it in navigator.

1) Hello world in java:

public class Example1 {		//(class name and file name must be same)
	public staic void main(String [] args) {
		System.out.println("Hello world");	
	}
}

2) Declaring a variable in java

public class Example2 {
	public static void main(Strings[] args){
		String Name = "Sai";
		int age = 22;
		System.out.println(Name);
		System.out.println(age);
	}
}

3) public class Example3 {
	public static void main(String[] args) {
		int totalmarks = 500;
		int marks_obtained = 395;
		
		percentage(totalmarks,marks_obtained);
	}
	public static void percantage(int totalmarks, int marks_obtained){
		
		int per = (marks_obtained * 100)/totalmarks;
		System.out.println(per);
	}
}

4) ststic function:

public class Example4 {
	public static void add(int a, int b){
		int c = a + b;
		System.out.println("add :",+c);
	}
	public static void add(int a, int b){
		int c = a - b;
		System.out.println("sub :",+c);
	}
	public static void add(int a, int b){
		int c = a * b;
		System.out.println("mul :",+c);
	}
	public static voia main(Strings[] args){
		add(5,10);
	}

}

5) non static function

public class Example5 {
	public void add(int a, int b){
		int c = a + b;
		System.out.println("add :",+c);
	}
	public void add(int a, int b){
		int c = a - b;
		System.out.println("sub :",+c);
	}
	public void add(int a, int b){
		int c = a * b;
		System.out.println("mul :",+c);
	}
	public void add(int a, int b){
		int c = a / b;
		System.out.println("div :",+c);
	}

	public static voia main(Strings[] args){
		Example5 obj = new Exapmle5;
		obj.add(5,10);
	}

}

Contructor is having some following properties:
1) same name as the class name.
2) do not have any return type.
3) used to create an object of same class.
4) it can be default or parameterized.

created a java class in day1:
	 New -> others -> Name it as TestExample4.
TestExample4 file
package day1;

public class TestExample4 {
	public static void main(String[] args){
		Example4.add(5,6);		
	}
}

6) write a method check vote eligibility

package day1;
public class Example6{
	public static checkEligibility(int age){
		if(age >= 18){
			System.out.println("you are eligible");
		} else {
			System.out.println("not eligible");
		}
	}
	 public static void main(String[] args){
		checkEligibility(25);
	}
}

