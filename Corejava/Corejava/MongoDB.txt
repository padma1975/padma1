[12:24 PM] Ramu Banka
1.show databases

admin   0.000GB

config  0.000GB

local   0.000GB 2.show dbs

admin   0.000GB

config  0.000GB

local   0.000GB 3.use zensar_db

switched to db zensar_db 
4.db

zensar_db 
5. db.version()

5.0.5 
6.db.help() 
========= Creat collecion =========
7.db.createCollection("person")
db.employeedetails.insertOne({name:"Jhon",Projects:["MongoDB","Hadoop","Python"]})
========================================
{​​​​​ "ok" : 1 }​​​​​ 
8.db.person.insert({​​​​​pid:101,name:"ramu",age:23}​​​​​)

WriteResult({​​​​​ "nInserted" : 1 }​​​​​) 
9.db.person.find()

{​​​​​ "_id" : ObjectId("6260e9f64d5165d7db26bbcb"), "pid" : 101, "name" : "ramu 

10.db.person.insertOne({​​​​​pid:102,name:"lucky",age:25}​​​​​)

{​​​​​

        "acknowledged" : true,

        "insertedId" : ObjectId("6260eb424d5165d7db26bbcc") 

11. db.person.find()

{​​​​​ "_id" : ObjectId("6260e9f64d5165d7db26bbcb"), "pid" : 101, "name" : "ramu", "age" : 23 }​​​​​

{​​​​​ "_id" : ObjectId("6260eb424d5165d7db26bbcc"), "pid" : 102, "name" : "lucky", "age" : 25 }​​​​​

{​​​​​ "_id" : ObjectId("6260ecec4d5165d7db26bbcd"), "pid" : 103, "name" : "prem", "age" : 27 }​​​​​

{​​​​​ "_id" : ObjectId("6260ecec4d5165d7db26bbce"), "pid" : 104, "name" : "gopi", "age" : 30  

12.db.person.insertMany([{​​​​​pid:103,name:"prem",age:27}​​​​​,{​​​​​pid:104,name:"gopi",age:30}​​​​​])

{​​​​​

        "acknowledged" : true,

        "insertedIds" : [

                ObjectId("6260ecec4d5165d7db26bbcd"),

                ObjectId("6260ecec4d5165d7db26bbce")

        ] 

13. db.person.find()

{​​​​​ "_id" : ObjectId("6260e9f64d5165d7db26bbcb"), "pid" : 101, "name" : "ramu", "age" : 23 }​​​​​

{​​​​​ "_id" : ObjectId("6260eb424d5165d7db26bbcc"), "pid" : 102, "name" : "lucky", "age" : 25 }​​​​​

{​​​​​ "_id" : ObjectId("6260ecec4d5165d7db26bbcd"), "pid" : 103, "name" : "prem", "age" : 27 }​​​​​

{​​​​​ "_id" : ObjectId("6260ecec4d5165d7db26bbce"), "pid" : 104, "name" : "gopi", "age" : 30 


14.db.student.isCapped()

false 

15.db.student.find({​​​​​ $or: [{​​​​​name:"boy"}​​​​​,{​​​​​age:{​​​​​$lt : 50}​​​​​}​​​​​]}​​​​​)

============Delete collection===========

	db.collectionNmae.drop()

16)db.student.insertMany( [
{_id:1001, name: "Jhon" , marks : {english:67, maths:65} , result:"pass"    }  ,       
{_id:1002, name: "Jack" , marks : {english:15, maths:18}, result:"fail"    }  ,    
{_id:1003, name: "Jhon" , marks : {english:56, maths:64}, result:"pass"    }  ,    
{_id:1004, name: "James" , marks : {english:35, maths:40}, result:"pass"    }  ,    
{_id:1005, name: "Joan" , marks : {english:15, maths:18}, result: "fail"    }  ,  
{_id:1006, name: "Jack" , marks : {english:35, maths:36}, result: "pass"    }     

 ] )



=============== Delete
18)db.student.deleteOne(name:"Joan k})
   db.student.deleteMany({name:"Joan"})
   db.student.deleteMany({})

=============================Update command====================
db.empdetails.updateOne({name:"jhon"},{$set:{scores:[25,28,29]}})


====================================================================
================removing a file from document========

db.student.updateOne({_id:1002},{$unset:{"grade":1}})


db.empdetails.insertOne({name:"sai",projects:["sql,python,java"]})

db.empdetails.insertMany([
{name:"sai",projects:["Oracle","python","Bank"]},
{name:"Krishna",projects:["ui","hadoop","java"]},
{name:"Rama",projects:["Backend","server","java"]},
])

db.empdetails.find({scores:{$gt:10,$lt:20}})

=======================Element match query=============================

db.empdetails.find({"projects":{$size:3}})


==========================push into array================

db.empdetails.updateOne({name:"sai"},{$push:{location:"US"}})
db.empdetails.updateOne({name:"sai"},{$push:{location:{$each:["US","Mexico"]}}})

db.empdetails.updateOne({name:"Rama"},{$addToset:{hobbies:["drawing","dancing"]}})

===========================Remove from array===========================

db.empdetails.updateOne({name:"sai"},{$pop:{location:"US"}})


===========================neasted document===========================
db.emp.insertMany([
{_id:1001, name: "Jhon" ,address:{permanent:"123,1st street",current:"234,2nd main"},slill:"spark" }  ,       
{_id:1002, name: "Jack" ,address:{permanent:"123,3st street",current:"234,4nd main"},slill:"spark1"  }  ,    
{_id:1003, name: "Jhon" ,address:{permanent:"123,5st street",current:"234,5nd main"},slill:"spark2"  }  ,      
])

db.emp.find({"address.current":"234,2nd main"})


db.studentmarks.insertMany ([
{name:"John",marks:[ {class: "II", total: 489} , { class: "III", total: 490 } ] },
{name: "James",marks:[{class: "III", total: 469 },{class: "IV", total: 50}]},
{name:"Jack",marks:[{class:"II", total: 489 },{class: "III", total: 390}]},
{name:"Smith", marks:[{class: "III", total: 489}, {class: "IV", total: 490}]}, 
{name:"Joshi",marks:[{class: "II", total: 465}, { class: "III", total: 470}]}
 
])

db.studentmarks.find({"marks":{class:"II", total: 489 }})
db.studentmarks.find({'marks.total':{$gt:470}})
db.studentmarks.find({'marks.0.class':"II"})
 db.studentmarks.find({'marks.1.total':50})

=========================projection (restriction)====================
Restrict the fields from the query

db.student.find({name:"Joan"},{name:1,result:1})
db.student.find({name:"Joan"},{"marks.english":1,"marks.maths":1})
db.emp.find({name:"Jack"},{name:1,age:1,})
db.emp.find({_id:1001},{permanent:1,slill:1})

=========================NUll or Missing fields==============================

db.sample.insertMany([
{_id:1,name:null},
{_id:2}
])

 db.empdetails.find({location:null})

======================TO check weather the field exists==========================
$exists is operator to find the fiels in the document or not

db.empdetails.find({hobbies:{$exists:false}})

==========================TYPE check======================
 db.sample.find({name:{$type:10}})



the db.collect.find() method 


 while (myCursor.hasNext()) {​​​​​

...    print(tojson(myCursor.next()));

... }​​​​​


var  myCursor = db.numbers.find();

 while (myCursor.hasNext()) {​​​​​

 print(tojson(myCursor.next()));

}​​​​​

myCursor.forEach(printjson)
db.numbers.find().limit(number)
db.numbers.find().skip(number)

db.numbers.find().limit(number).skip(number)
programatically write above limit and skip commands

var num =5
db.numbers.find().limit(num).skip(num)


======================Aggregation pipe line======================

db.orders.insertMany([
{custID:"10001",amount:500,status:"A"},
{custID:"10001",amount:250,status:"A"},
{custID:"10002",amount:200,status:"A"},
{custID:"10001",amount: 300, status:"D"}
]);

db.orders.aggregate([{$project:{custID:1,_id:0}}])
db.orders. aggregate ({$match: {status:'A'}},   {  $group : { _id: "$custID", TotalAmount: {$sum : "$amount"}}} )

================Single purpose Aggregation operation=================
SQL Terms

where

